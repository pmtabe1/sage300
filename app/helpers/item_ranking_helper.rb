module ItemRankingHelper

  def item_ranking
    Accpac::Oeshdt.find_by_sql("
      SELECT
      q.ITEM,
      CASE
        WHEN SUM(SALES_AMOUNT) OVER (ORDER BY SALES_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(SALES_AMOUNT) OVER (),0) <= 0.7 THEN 'A'
        WHEN SUM(SALES_AMOUNT) OVER (ORDER BY SALES_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(SALES_AMOUNT) OVER (),0) <= 0.9 THEN 'B'
        ELSE 'C'
      END AS ABC_SALES_RANK,
      DENSE_RANK() OVER (PARTITION BY 1,2 ORDER BY SALES_AMOUNT DESC) AS DENSE_SALES_RANK,
      CASE
        WHEN SUM(COST_AMOUNT) OVER (ORDER BY COST_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(COST_AMOUNT) OVER (),0) <= 0.7 THEN 'A'
        WHEN SUM(COST_AMOUNT) OVER (ORDER BY COST_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(COST_AMOUNT) OVER (),0) <= 0.9 THEN 'B'
        ELSE 'C'
      END AS ABC_COST_RANK,
      DENSE_RANK() OVER (PARTITION BY 1,2 ORDER BY COST_AMOUNT DESC) AS DENSE_COST_RANK,
      CASE
        WHEN SUM(MARGIN_AMOUNT) OVER (ORDER BY MARGIN_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(MARGIN_AMOUNT) OVER (),0) <= 0.7 THEN 'A'
        WHEN SUM(MARGIN_AMOUNT) OVER (ORDER BY MARGIN_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(MARGIN_AMOUNT) OVER (),0) <= 0.9 THEN 'B'
        ELSE 'C'
      END AS ABC_MARGIN_RANK,
      DENSE_RANK() OVER (PARTITION BY 1,2 ORDER BY MARGIN_AMOUNT DESC) AS DENSE_MARGIN_RANK

      FROM
        (SELECT RTRIM(ITEM) AS ITEM, SUM(FAMTSALES) AS SALES_AMOUNT, SUM(FCSTSALES) AS COST_AMOUNT, SUM(FAMTSALES) - SUM(FCSTSALES) AS MARGIN_AMOUNT
        FROM OESHDT
        WHERE DATEADD(MONTH, -36, GETDATE()) <= CONVERT(DATE,NULLIF(CONVERT(VARCHAR(10),CONVERT(INT,TRANDATE)),0))
        GROUP BY AUDTORG, ITEM)q
      ")
  end

  def item_ranking_by_locations
    Accpac::Oeshdt.find_by_sql("
      SELECT
        q.LOCATION, q.ITEM,

        CASE
          WHEN SUM(q.SALES_AMOUNT) OVER (PARTITION BY q.LOCATION ORDER BY q.SALES_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(q.SALES_AMOUNT) OVER (PARTITION BY q.LOCATION),0) <= 0.7 THEN 'A'
          WHEN SUM(q.SALES_AMOUNT) OVER (PARTITION BY q.LOCATION ORDER BY q.SALES_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(q.SALES_AMOUNT) OVER (PARTITION BY q.LOCATION),0) <= 0.9 THEN 'B'
          ELSE 'C'
        END AS ABC_SALES_RANK,
        DENSE_RANK() OVER (PARTITION BY q.LOCATION ORDER BY q.SALES_AMOUNT DESC) AS DENSE_SALES_RANK,

        CASE
          WHEN SUM(q.COST_AMOUNT) OVER (PARTITION BY q.LOCATION ORDER BY q.COST_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(q.COST_AMOUNT) OVER (PARTITION BY q.LOCATION),0) <= 0.7 THEN 'A'
          WHEN SUM(q.COST_AMOUNT) OVER (PARTITION BY q.LOCATION ORDER BY q.COST_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(q.COST_AMOUNT) OVER (PARTITION BY q.LOCATION ),0) <= 0.9 THEN 'B'
          ELSE 'C'
        END AS ABC_COST_RANK,
        DENSE_RANK() OVER (PARTITION BY q.LOCATION ORDER BY q.COST_AMOUNT DESC) AS DENSE_COST_RANK,

        CASE
          WHEN SUM(q.MARGIN_AMOUNT) OVER (PARTITION BY q.LOCATION ORDER BY q.MARGIN_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(q.MARGIN_AMOUNT) OVER (PARTITION BY q.LOCATION),0) <= 0.7 THEN 'A'
          WHEN SUM(q.MARGIN_AMOUNT) OVER (PARTITION BY q.LOCATION ORDER BY q.MARGIN_AMOUNT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / NULLIF(SUM(q.MARGIN_AMOUNT) OVER (PARTITION BY q.LOCATION),0) <= 0.9 THEN 'B'
          ELSE 'C'
        END AS ABC_MARGIN_RANK,
        DENSE_RANK() OVER (PARTITION BY q.LOCATION ORDER BY q.MARGIN_AMOUNT DESC) AS DENSE_MARGIN_RANK

        FROM
        (SELECT
            RTRIM(shd.[ITEM]) AS ITEM, shd.[LOCATION] AS LOCATION, SUM(shd.[FAMTSALES]) AS SALES_AMOUNT,
            SUM(shd.[FCSTSALES]) AS COST_AMOUNT ,SUM(shd.[FAMTSALES]) - SUM(shd.[FCSTSALES]) AS MARGIN_AMOUNT
            FROM [OESHDT] shd
            WHERE DATEADD(MONTH, -36, GETDATE()) <= CONVERT(DATE,NULLIF(CONVERT(VARCHAR(10),CONVERT(INT,shd.[TRANDATE])),0))
            GROUP BY shd.[ITEM], shd.[LOCATION]
        ) q
    ")
  end

end
